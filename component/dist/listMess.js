/* listMess.html generated by Svelte v2.13.2 */
var ListMess = (function() { "use strict";

	var methods = {
    sendMessage: function() {
        socket.emit('chat', {
            message: message.value,
            handle: handle.value,
            color: colorAva.value
        })
    },
    renderListsms: function(data, type) {
        let color = data.color.replace('#','');
        feedback.innerHTML = '';
        output.innerHTML += `<li class="left clearfix">
            <span class="chat-img pull-left">
                <img src="http://placehold.it/50/`+ color +`/fff&text=`+ data.handle.substring(0, 1) +`" alt="User Avatar" class="img-circle" />
            </span>
            <div class="chat-body clearfix">
                <div class="header">
                    <strong class="primary-font">`+ data.handle +`</strong> 
                </div>
                <p>
                    `+ data.message +`
                </p>
            </div>
        </li>`;
    }
};

	function oncreate() {
    var btn = document.getElementById('send'),
        handle = document.getElementById('handle'),
        message = document.getElementById('message'),
        output = document.getElementById('output'),
        feedback = document.getElementById('feedback'),
        color = document.getElementById('yourcolor'),
        colorAva = document.getElementById('colorAva');
        
    btn.addEventListener('click', function() {
        this.sendMessage();
    }.bind(this));

    message.addEventListener('keypress', function() {
        // socket.emit('typing', handle.value); 
        socket.emit('typing', 'some one '); 
    })

    //Listen event
    socket.on('whisper', function(data) {
        this.renderListsms(data, 1);
    }.bind(this));

    socket.on('chat', function(data) {
        this.renderListsms(data, 0);
    }.bind(this));

    socket.on('typing', function(data){
        feedback.innerHTML = `<p><em>` + data + ` is typing message....</em></p>`
    });
};

	function ondestroy(){
    btn.removeEventListener("click", function(){});
    message.removeEventListener("keypress", function(){});
};

	function create_main_fragment(component, ctx) {
		var div;

		return {
			c() {
				div = createElement("div");
				div.innerHTML = "<div class=\"panel panel-default\"><div class=\"panel-heading\">Let's Chat</div>\r\n        <div class=\"panel-body\"><ul class=\"chat\" id=\"output\"></ul>\r\n            <div class=\"wow fadeOut animated\" data-wow-delay=\"400ms\" data-wow-iteration=\"infinite\" data-wow-duration=\"2s\" id=\"feedback\"></div></div>\r\n\r\n        <div class=\"panel-footer\"><div class=\"ui form\"><div class=\"fields\"><div class=\"two wide field\"><input type=\"text\" placeholder=\"Type name user\" id=\"handle\" disabled=\"\"></div>\r\n                    <div class=\"twelve wide field\"><input type=\"text\" placeholder=\"Type chat here\" id=\"message\"></div>\r\n                    <div class=\"two wide field\"><button class=\"fluid ui red button\" id=\"send\">Send</button></div></div></div></div></div>";
				div.id = "livechat-container";
			},

			m(target, anchor) {
				insert(target, div, anchor);
			},

			p: noop,

			d(detach) {
				if (detach) {
					detachNode(div);
				}
			}
		};
	}

	function ListMess(options) {
		init(this, options);
		this._state = assign({}, options.data);
		this._intro = true;

		this._handlers.destroy = [ondestroy];

		this._fragment = create_main_fragment(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}
	}

	assign(ListMess.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	on: on,
	 	set: set,
	 	_set: _set,
	 	_stage: _stage,
	 	_mount: _mount,
	 	_differs: _differs
	 });
	assign(ListMess.prototype, methods);

	ListMess.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function noop() {}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function get() {
		return this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}
	return ListMess;
}());